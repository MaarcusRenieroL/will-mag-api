generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator zod {
//   provider          = "prisma-zod-generator"
//   output            = "../src/db/validation"
//   isGenerateSelect  = true
//   isGenerateInclude = true
// }

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id              String  @id @default(cuid())
  email           String
  emailVerified   Boolean
  username        String? @db.VarChar(100)
  displayUsername String?

  role      User_Role @default(USER)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profile   Profile?
  name      String    @db.Text
  image     String?   @db.Text
  sessions  Session[]
  accounts  Account[]

  @@unique([email])
  @@unique([username])
  @@fulltext([name])
  @@fulltext([email])
  @@fulltext([displayUsername])
  @@fulltext([username])
  @@fulltext([name, email])
  @@map("user")
}

model Profile {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bio       String? @db.Text
  instagram String? @db.VarChar(255)
  tiktok    String? @db.VarChar(255)
  youtube   String? @db.VarChar(255)
  facebook  String? @db.VarChar(255)
  twitter   String? @db.VarChar(255)
  linkedin  String? @db.VarChar(255)
  website   String? @db.VarChar(255)
  other     String? @db.VarChar(255)

  avatarUrl String? @db.VarChar(255)

  phone String? @db.VarChar(20)

  address     String
  city        String?   @db.VarChar(100)
  country     String?   @db.VarChar(100)
  postalCode  String?   @db.VarChar(20)
  dateOfBirth DateTime?
  gender      String?   @db.VarChar(50)

  hobbiesAndPassions    String?                @db.Text
  paidVoterMessage      String?                @db.Text
  freeVoterMessage      String?                @db.Text
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  contestParticipations ContestParticipation[] @relation("ProfileContestParticipations")

  contestWon Contest[]

  votesCast      Vote[]    @relation("VotesCast")
  votesReceived  Vote[]    @relation("VotesReceived")
  lastFreeVoteAt DateTime?

  // ONE cover image
  coverImageId String? @unique
  coverImage   Media?  @relation("ProfileCoverImage", fields: [coverImageId], references: [id], onDelete: Cascade)

  // MULTIPLE profile gallery images
  profilePhotos Media[] @relation("ProfilePhotos")

  notification Notification[]

  payments Payment[]

  @@fulltext([bio])
  @@fulltext([hobbiesAndPassions])
  @@fulltext([paidVoterMessage])
  @@fulltext([freeVoterMessage])
  @@fulltext([city])
  @@fulltext([country])
  @@fulltext([bio, city, country, hobbiesAndPassions, paidVoterMessage, freeVoterMessage])
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRead    Boolean  @default(false)
  archived  Boolean  @default(false)
  icon      Icon?    @default(INFO)
  action    String?

  @@index([profileId])
}

enum Icon {
  WARNING
  SUCESS
  INFO
}

model Contest {
  id                    String                 @id @default(cuid())
  name                  String                 @db.VarChar(255)
  description           String                 @db.LongText
  prizePool             Float
  contestParticipations ContestParticipation[] @relation("ContestParticipants")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  awards                Award[]
  votes                 Vote[]
  winner                Profile?               @relation(fields: [winnerProfileId], references: [id])
  startDate             DateTime
  endDate               DateTime
  winnerProfileId       String?

  images Media[] @relation("ContestImages")
}

model Award {
  id   String @id @default(cuid())
  name String
  icon String

  contestId String
  contest   Contest @relation(fields: [contestId], references: [id])

  @@unique([name, icon, contestId])
  @@map("contest_awards")
}

model Vote {
  id String @id @default(cuid())

  type Vote_Type @default(FREE)

  voterId String
  voter   Profile @relation("VotesCast", fields: [voterId], references: [id], onDelete: Cascade)

  voteeId String
  votee   Profile @relation("VotesReceived", fields: [voteeId], references: [id], onDelete: Cascade)

  contestId String
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  count     Int     @default(1)

  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Vote_Type {
  FREE
  PAID
}

model VoteMultiplierPeriod {
  id              String   @id @default(cuid())
  startTime       DateTime
  endTime         DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  multiplierTimes Int      @default(2)

  @@map("vote_multiplier_period")
}

model ContestParticipation {
  id        String  @id @default(cuid())
  profileId String
  contestId String
  profile   Profile @relation("ProfileContestParticipations", fields: [profileId], references: [id], onDelete: Cascade)
  contest   Contest @relation("ContestParticipants", fields: [contestId], references: [id], onDelete: Cascade)

  coverImage String? @db.VarChar(512)
  isApproved Boolean @default(false)

  isParticipating Boolean? @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, contestId])
}

enum User_Role {
  USER
  ADMIN
  MODERATOR
}

model Media {
  id        String      @id @default(uuid())
  key       String
  name      String
  url       String
  size      Int?
  caption   String?
  type      String?
  status    File_Status @default(PROCESSING)
  mediaType Media_Type  @default(PROFILE_IMAGE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Profile for gallery images
  profileId String?
  profile   Profile? @relation("ProfilePhotos", fields: [profileId], references: [id], onDelete: Cascade)

  // Relation to Profile as cover image (reverse relation defined in Profile)
  coverOfProfile Profile? @relation("ProfileCoverImage")

  // Relation to Contest for contest images
  contestId String?
  contest   Contest? @relation("ContestImages", fields: [contestId], references: [id], onDelete: Cascade)

  @@map("media")
}

enum Media_Type {
  USER_IMAGE
  PROFILE_IMAGE
  PROFILE_COVER_IMAGE
  PROFILE_AVATAR
  VOTING_IMAGE
  COVER_IMAGE
  CONTEST_IMAGE
}

enum File_Status {
  FAILED
  PROCESSING
  COMPLETED
}

model Payment {
  id String @id @default(cuid())

  payerId String
  payer   Profile @relation(fields: [payerId], references: [id], onDelete: Cascade)

  amount Float
  status Payment_Status @default(PENDING)

  votes Vote[]

  stripeSessionId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Payment_Status {
  PENDING
  COMPLETED
  FAILED
}
